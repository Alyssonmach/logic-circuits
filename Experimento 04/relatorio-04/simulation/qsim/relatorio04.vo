// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.0 Build 711 06/05/2020 SJ Lite Edition"

// DATE "10/18/2020 22:09:36"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module verifica_individuos (
	a,
	b,
	c,
	s);
input 	a;
input 	b;
input 	c;
output 	s;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \s~output_o ;
wire \c~input_o ;
wire \a~input_o ;
wire \b~input_o ;
wire \or1|s~0_combout ;


cycloneive_io_obuf \s~output (
	.i(\or1|s~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\s~output_o ),
	.obar());
// synopsys translate_off
defparam \s~output .bus_hold = "false";
defparam \s~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \c~input (
	.i(c),
	.ibar(gnd),
	.o(\c~input_o ));
// synopsys translate_off
defparam \c~input .bus_hold = "false";
defparam \c~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \a~input (
	.i(a),
	.ibar(gnd),
	.o(\a~input_o ));
// synopsys translate_off
defparam \a~input .bus_hold = "false";
defparam \a~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \b~input (
	.i(b),
	.ibar(gnd),
	.o(\b~input_o ));
// synopsys translate_off
defparam \b~input .bus_hold = "false";
defparam \b~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \or1|s~0 (
// Equation(s):
// \or1|s~0_combout  = (\c~input_o ) # ((!\b~input_o ) # (!\a~input_o ))

	.dataa(\c~input_o ),
	.datab(gnd),
	.datac(\a~input_o ),
	.datad(\b~input_o ),
	.cin(gnd),
	.combout(\or1|s~0_combout ),
	.cout());
// synopsys translate_off
defparam \or1|s~0 .lut_mask = 16'hAFFF;
defparam \or1|s~0 .sum_lutc_input = "datac";
// synopsys translate_on

assign s = \s~output_o ;

endmodule
