// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.0 Build 711 06/05/2020 SJ Lite Edition"

// DATE "11/19/2020 15:41:59"

// 
// Device: Altera EP4CE6F17C6 Package FBGA256
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module mod_test4 (
	SW,
	LEDR);
input 	SW;
output 	[3:0] LEDR;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \LEDR[0]~output_o ;
wire \LEDR[1]~output_o ;
wire \LEDR[2]~output_o ;
wire \LEDR[3]~output_o ;
wire \SW~input_o ;
wire \cs1|ff1|q~0_combout ;
wire \cs1|ff2|q~0_combout ;
wire \cs1|ff2|q~q ;
wire \cs1|ff3|q~0_combout ;
wire \cs1|ff3|q~q ;
wire \cs1|ff4|q~0_combout ;
wire \cs1|ff4|q~q ;
wire \cs1|nand1~0_combout ;
wire \cs1|ff1|q~q ;


cycloneive_io_obuf \LEDR[0]~output (
	.i(\cs1|ff1|q~q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[0]~output .bus_hold = "false";
defparam \LEDR[0]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \LEDR[1]~output (
	.i(\cs1|ff2|q~q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[1]~output .bus_hold = "false";
defparam \LEDR[1]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \LEDR[2]~output (
	.i(\cs1|ff3|q~q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[2]~output .bus_hold = "false";
defparam \LEDR[2]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \LEDR[3]~output (
	.i(\cs1|ff4|q~q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[3]~output .bus_hold = "false";
defparam \LEDR[3]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \SW~input (
	.i(SW),
	.ibar(gnd),
	.o(\SW~input_o ));
// synopsys translate_off
defparam \SW~input .bus_hold = "false";
defparam \SW~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \cs1|ff1|q~0 (
// Equation(s):
// \cs1|ff1|q~0_combout  = !\cs1|ff1|q~q 

	.dataa(\cs1|ff1|q~q ),
	.datab(gnd),
	.datac(gnd),
	.datad(gnd),
	.cin(gnd),
	.combout(\cs1|ff1|q~0_combout ),
	.cout());
// synopsys translate_off
defparam \cs1|ff1|q~0 .lut_mask = 16'h5555;
defparam \cs1|ff1|q~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \cs1|ff2|q~0 (
// Equation(s):
// \cs1|ff2|q~0_combout  = \cs1|ff1|q~q  $ (\cs1|ff2|q~q )

	.dataa(gnd),
	.datab(gnd),
	.datac(\cs1|ff1|q~q ),
	.datad(\cs1|ff2|q~q ),
	.cin(gnd),
	.combout(\cs1|ff2|q~0_combout ),
	.cout());
// synopsys translate_off
defparam \cs1|ff2|q~0 .lut_mask = 16'h0FF0;
defparam \cs1|ff2|q~0 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \cs1|ff2|q (
	.clk(\SW~input_o ),
	.d(\cs1|ff2|q~0_combout ),
	.asdata(vcc),
	.clrn(!\cs1|nand1~0_combout ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\cs1|ff2|q~q ),
	.prn(vcc));
// synopsys translate_off
defparam \cs1|ff2|q .is_wysiwyg = "true";
defparam \cs1|ff2|q .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \cs1|ff3|q~0 (
// Equation(s):
// \cs1|ff3|q~0_combout  = \cs1|ff3|q~q  $ (((\cs1|ff1|q~q  & \cs1|ff2|q~q )))

	.dataa(gnd),
	.datab(\cs1|ff3|q~q ),
	.datac(\cs1|ff1|q~q ),
	.datad(\cs1|ff2|q~q ),
	.cin(gnd),
	.combout(\cs1|ff3|q~0_combout ),
	.cout());
// synopsys translate_off
defparam \cs1|ff3|q~0 .lut_mask = 16'h3CCC;
defparam \cs1|ff3|q~0 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \cs1|ff3|q (
	.clk(\SW~input_o ),
	.d(\cs1|ff3|q~0_combout ),
	.asdata(vcc),
	.clrn(!\cs1|nand1~0_combout ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\cs1|ff3|q~q ),
	.prn(vcc));
// synopsys translate_off
defparam \cs1|ff3|q .is_wysiwyg = "true";
defparam \cs1|ff3|q .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \cs1|ff4|q~0 (
// Equation(s):
// \cs1|ff4|q~0_combout  = \cs1|ff4|q~q  $ (((\cs1|ff1|q~q  & (\cs1|ff2|q~q  & \cs1|ff3|q~q ))))

	.dataa(\cs1|ff4|q~q ),
	.datab(\cs1|ff1|q~q ),
	.datac(\cs1|ff2|q~q ),
	.datad(\cs1|ff3|q~q ),
	.cin(gnd),
	.combout(\cs1|ff4|q~0_combout ),
	.cout());
// synopsys translate_off
defparam \cs1|ff4|q~0 .lut_mask = 16'h6AAA;
defparam \cs1|ff4|q~0 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \cs1|ff4|q (
	.clk(\SW~input_o ),
	.d(\cs1|ff4|q~0_combout ),
	.asdata(vcc),
	.clrn(!\cs1|nand1~0_combout ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\cs1|ff4|q~q ),
	.prn(vcc));
// synopsys translate_off
defparam \cs1|ff4|q .is_wysiwyg = "true";
defparam \cs1|ff4|q .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \cs1|nand1~0 (
// Equation(s):
// \cs1|nand1~0_combout  = (\cs1|ff2|q~q  & \cs1|ff4|q~q )

	.dataa(\cs1|ff2|q~q ),
	.datab(\cs1|ff4|q~q ),
	.datac(gnd),
	.datad(gnd),
	.cin(gnd),
	.combout(\cs1|nand1~0_combout ),
	.cout());
// synopsys translate_off
defparam \cs1|nand1~0 .lut_mask = 16'h8888;
defparam \cs1|nand1~0 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \cs1|ff1|q (
	.clk(\SW~input_o ),
	.d(\cs1|ff1|q~0_combout ),
	.asdata(vcc),
	.clrn(!\cs1|nand1~0_combout ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\cs1|ff1|q~q ),
	.prn(vcc));
// synopsys translate_off
defparam \cs1|ff1|q .is_wysiwyg = "true";
defparam \cs1|ff1|q .power_up = "low";
// synopsys translate_on

assign LEDR[0] = \LEDR[0]~output_o ;

assign LEDR[1] = \LEDR[1]~output_o ;

assign LEDR[2] = \LEDR[2]~output_o ;

assign LEDR[3] = \LEDR[3]~output_o ;

endmodule
